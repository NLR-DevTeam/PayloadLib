plugins {
    id 'java'
    id 'com.vanniktech.maven.publish' version '0.33.0'
    id 'io.papermc.paperweight.userdev' version '2.0.0-beta.17' apply false
    id 'xyz.jpenilla.run-paper' version '2.3.1' apply false
}

group = 'top.nlrdev'
version = '0.0.2-SNAPSHOT'

subprojects {
    apply plugin: 'java'
    group = rootProject.group
    version = rootProject.version

    rootProject.evaluationDependsOn(":$it.name")
}

java {
    withSourcesJar()
    withJavadocJar()
}

['jar', 'sourcesJar'].collect { tasks.named(it).get() }.forEach { Task task ->
    def subTasks = subprojects.collect { it.tasks.named(task.name).get() }
    task.dependsOn(subTasks)
    subTasks.forEach {
        task.from(zipTree(it.archiveFile.get().asFile))
    }
}

// Only include core's docs
javadoc {
    def core = project(':core')
    source core.sourceSets.main.java.srcDirs
    classpath = files(core.sourceSets.main.compileClasspath)

    options.addStringOption('Xdoclint:-missing', '-quiet')
}

gradle.taskGraph.whenReady { TaskExecutionGraph graph ->
    def isPublish = graph.allTasks.collect { it.name }.stream().anyMatch { it.toLowerCase().contains("publish") }

    if (!isPublish) {
        sourcesJar.enabled = false
        javadoc.enabled = false
    }
}

afterEvaluate {
    plainJavadocJar {
        enabled = false
    }
}

mavenPublishing {
    publishToMavenCentral()

    if (System.hasProperty('signing.keyId')) {
        signAllPublications()
    }

    coordinates(rootProject.group as String, 'payloadlib', rootProject.version as String)

    pom {
        name = rootProject.name
        description = 'Easier approach for Paper servers to send & handle custom payloads, simple & powerful.'
        url = 'https://github.com/NLR-DevTeam/PayloadLib'

        licenses {
            license {
                name = 'The MIT License'
                url = 'https://mit-license.org/'
            }
        }

        developers {
            developer {
                id = 'xiaym'
                name = 'XIAYM-gh'
                email = 'xiaym123@qq.com'
                url = 'https://github.com/XIAYM-gh'
            }
        }

        scm {
            url = 'https://github.com/NLR-DevTeam/PayloadLib'
            connection = 'scm:git:git://github.com/NLR-DevTeam/PayloadLib.git'
            developerConnection = 'scm:git:ssh://github.com:NLR-DevTeam/PayloadLib.git'
        }

        // Append 'implementation' dependencies
        withXml {
            def node = asNode().appendNode('dependencies')
            project(':core').configurations.implementation.allDependencies.withType(ModuleDependency).forEach {
                def depNode = node.appendNode('dependency')
                depNode.appendNode('groupId', it.group)
                depNode.appendNode('artifactId', it.name)
                depNode.appendNode('version', it.version)
                depNode.appendNode('scope', 'compile')
            }
        }
    }
}
